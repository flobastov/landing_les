<?php
/**
 * Created by IntelliJ IDEA.
 * User: LobastovG
 * Date: 10.01.2019
 * Time: 9:01
 */

namespace App\Controller;


use App\Entity\FormRequest;
use Doctrine\Common\Persistence\ObjectManager;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;

class FormController extends AbstractController
{
    /**
     * @Route("/ajax/sendform", name="send_form")
     * @param Request $request
     * @param ObjectManager $manager
     * @param \Swift_Mailer $mailer
     * @return \Symfony\Component\HttpFoundation\JsonResponse|\Symfony\Component\HttpFoundation\RedirectResponse
     */
    public function sendRequest(Request $request, ObjectManager $manager, \Swift_Mailer $mailer)
    {
        if ($request->isXmlHttpRequest()) {
            $status = true;
            $errors = [];
            $name = '';
            $phone = '';

            if (empty($request->get('name'))) {
                $errors['name'] = 'Вы не ввели имя';
            } else {
                $name = $request->get('name');
            }

            if (empty($request->get('phone'))) {
                $errors['phone'] = 'Вы не ввели телефон';
            } else {
                $phone = $request->get('phone');
            }

            if ($request->get('agree') != 'on') {
                $errors['agree'] = 'Нужно согласиться на условия обработки персональных данных';
            } else {
                $agree = $request->get('agree');
            }

            if (count($errors) > 0) {
                $status = false;
            } else {
                $form_name = $request->get('form_name');
                $message = $request->get('mes');
                $file = $request->files->get('file');

                $date = new \DateTime();
                $data = new FormRequest();

                $data->setName($name);
                $data->setPhone($phone);
                $data->setFormName($form_name);
                $data->setMessage($message);

                $fileName = '';

                if (null !== $file) {
                    $extension = $file->guessExtension();
                    $fileName = $this->generateUniqueFileName() . '.' . $extension;
                    // moves the file to the directory where brochures are stored
                    $file->move(
                        $this->getParameter('producers_files'),
                        $fileName
                    );
                    $fileName = 'uploads/producers/' . $fileName;
                    $data->setFile($fileName);
                }

                $data->setCreatedAt($date->format('d.m.Y H:i'));
                $manager->persist($data);
                $manager->flush();

                $mes = (new \Swift_Message($form_name))
//                    ->setFrom(['noreply@eurokam-kirov.ru' => 'noreply'])
                    ->setFrom(['ifarmhaus@yandex.ru' => 'noreply'])
//                    ->setTo(['ip.shupletsov@yandex.ru'])
                    ->setTo(['flobastov@gmail.com'])
                    ->setBcc(['monitoring@palax.info'])
                    ->setBody(
                        $this->renderView(
                            'email/_email.html.twig',
                            [
                                'name' => $name,
                                'phone' => $phone,
                                'form_name' => $form_name,
                                'message' => $message,
                                'file' => 'uploads/producers/' . $fileName,
                            ]
                        ),
                        'text/html'
                    );
                $mailer->send($mes);
            }

            return $this->json([
                'status' => $status,
                'errors' => $errors,
            ]);
        } else {
            return $this->redirectToRoute('homepage');
        }
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

}
